Requirements
------------
If you want to hack on the Glimpse project, it will make your life easier
to have the packages listed in glimpse-vagrant.yml installed on your system.


Compilation
-----------
Your first port of call should be the upstream documentation: https://wiki.gimp.org/wiki/Hacking:Building/Linux

You can also check the glimpse-vagrant.sh file to see which environment variables you need to set and build steps you should follow.


Quick start
-----------
Ensure you have Vagrant and Oracle Virtualbox installed, then follow these steps from the top directory of this git repository:

$ vagrant up
$ vagrant ssh
$ cd /vagrant
$ sh glimpse-vagrant.sh
$ ./glimpse-prefix/bin/glimpse

If you copy the glimpse-vagrant.sh, give it a new name, then remove the steps for BABL, GEGL and MyPaint dependencies you will have a quick and easy way of rebuilding Glimpse after you make a code change.


Auto-generated Files
--------------------
Please notice that some files in the source are generated from other
sources. All those files have a short notice about being generated
somewhere at the top. Among them are the files ending in pdb.[ch] in
the libgimp directory and the files ending in cmds.c in the app/pdb
subdirectory. Those are generated from the respective .pdb files in
pdb/groups.


Hackordnung
-----------
While we are still following the upstream code in "soft forks" we recommend you continue to follow their code style:

"We encourage you to follow the GNU IMP coding style throughout the GNU IMP
project.  For the core components (application and libs) this coding
style is enforced.  The GNU IMP coding style is defined as follows:

    * There's a single space between the function name and the opening
      paren.

    * Function names are lowercase, words separated by underscores.

    * Macros and enums are all uppercase, words separated by
      underscores.

    * Types are all words capitalized, no separators between words.

    * All functions in header files need to be prototyped.

    * Indentation rules are GNU coding style, in particular:
        - 2 characters indentation level
        - Do not use tabs (of course your editor can accept the TAB key
          as a command, typically to indent the current line properly
          or to add spaces at the cursor until the next multiple of 8
          columns, but it should not put TAB characters in the file).
        - When editing files that still have TABs in them, make sure your
          editor interprets the TABs correctly, that is, has tab stops
          at 8 column intervals.
        - Opening braces are on a new line and indented one level.
        - Function header have the return type on one line, the name
          starting in the first column of the following line. All
          parameters are prototyped and there's a new line for each.

The source tree contains local config files which can be used to set the
right coding style in common editors: `.dir-locals.el` for Emacs,
`.kateconfig` for Kate, and `devel-docs/c.vim` for Vim (check the top
comments to see how to enable it automatically when opening a file in
the GNU IMP tree).

Try to make use of GLib's object system as much as possible. Do not
create wrappers around functions of parent classes. If you end up
duplicating code, try to create a common parent class and implement
the common methods there.

Don't include headers in headers except where unavoidable (e.g. for
deriving objects). Opaque typedefs go to app/base/base-types.h,
app/core/core-types.h etc. See devel-docs/includes.txt for a
detailed description of the include policy.

Don't use the GTK wrappers around the GLib object and signal system.

One goal of GNU IMP development is to make the GNU IMP code more readable
and understandable. Please help us to achieve this goal by cleaning up
the present code and make sure that all new code follows the coding
guidelines."
